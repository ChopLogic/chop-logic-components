import{j as e}from"./jsx-runtime-OAISXtky.js";import{useMDXComponents as r}from"./index-DOvxcyG1.js";import{ae as s}from"./index-Bo0SZYHd.js";import{T as i}from"./TextInput.stories-DPTdaidy.js";import"./index-qVDZzPEr.js";import"./iframe-BNR7cRmn.js";import"../sb-preview/runtime.js";import"./index-DzcqJxd1.js";import"./index-D-8MO0q_.js";import"./index-D2o5vtt7.js";import"./index-DrFu-skq.js";import"./TextInput-BcbEk0b2.js";import"./Label-tVES63B-.js";import"./index-BT98D5zi.js";import"./themes-BnN1RKU4.js";import"./index-bc0GsKql.js";function t(n){const d={a:"a",code:"code",h1:"h1",h3:"h3",p:"p",pre:"pre",strong:"strong",table:"table",tbody:"tbody",td:"td",th:"th",thead:"thead",tr:"tr",...r(),...n.components};return e.jsxs(e.Fragment,{children:[e.jsx(s,{of:i,title:"TextInput"}),`
`,e.jsx(d.h1,{id:"choplogictextinput",children:"ChopLogicTextInput"}),`
`,e.jsx(d.p,{children:"Styled component for entering text, email or password. Supports validation with custom error message and all standard HTML input attributes."}),`
`,e.jsx(d.h3,{id:"usage",children:"Usage"}),`
`,e.jsx(d.pre,{children:e.jsx(d.code,{className:"language-tsx",children:`import { ChopLogicTextInput } from 'chop-logic-components';

const Example = () => {
  return (
    <ChopLogicTextInput
      label='Enter the formula:'
      name='formula'
      errorMessage='Only latin letters are allowed'
      validator={{ regexp: '^[A-Za-z ]+$' }}
      required
    />
  );
};

export default Example;
`})}),`
`,e.jsx(d.h3,{id:"props",children:"Props"}),`
`,e.jsxs(d.table,{children:[e.jsx(d.thead,{children:e.jsxs(d.tr,{children:[e.jsx(d.th,{children:"Prop"}),e.jsx(d.th,{children:"Type"}),e.jsx(d.th,{children:"Description"}),e.jsx(d.th,{children:"Default"}),e.jsx(d.th,{children:"Required"})]})}),e.jsxs(d.tbody,{children:[e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"name"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsx(d.td,{children:"A string representing the name attribute of the component, used for form submissions."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"Yes"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"label"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsx(d.td,{children:"A string that represents the label for the component."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"Yes"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"type"})}),e.jsxs(d.td,{children:[e.jsx(d.code,{children:"'text'"})," or ",e.jsx(d.code,{children:"'email'"})," or ",e.jsx(d.code,{children:"'password'"})]}),e.jsx(d.td,{children:"The input type attribute."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"'text'"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"placeholder"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsx(d.td,{children:"The placeholder property of the input interface represents a hint to the user of what can be entered in the control."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"'Type here...'"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"defaultValue"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsx(d.td,{children:"The string that will be supplied as the default value of the input."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"clearable"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"boolean"})}),e.jsx(d.td,{children:"A boolean indicating whether to display the input clear button."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"false"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"validator"})}),e.jsxs(d.td,{children:[e.jsx(d.code,{children:"ChopLogicRegExpWithFlags"})," or ",e.jsx(d.code,{children:"ChopLogicTextInputValidator"})]}),e.jsx(d.td,{children:"A function or regular expression that allows you to validate an input value and display an error message if validation fails."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"errorMessage"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsx(d.td,{children:"An optional string that displays when the input value is incorrect."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"onChange"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"ChangeEventHandler"})}),e.jsx(d.td,{children:"A function that is called when a user type something in the input. It receives a ChangeEventHandler for handling the event on the input."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"onFocus"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"FocusEventHandler"})}),e.jsx(d.td,{children:"A function that is called when focus is set on the input."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"onBlur"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"FocusEventHandler"})}),e.jsx(d.td,{children:"A function that is called when focus leaves the input."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"onClear"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"() => void"})}),e.jsx(d.td,{children:"A function that is called when the clear input button is clicked."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"maxLength"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"number"})}),e.jsx(d.td,{children:"Maximum number of characters in the input."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"autoComplete"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsxs(d.td,{children:["The ",e.jsx(d.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Attributes/autocomplete",rel:"nofollow",children:"HTML autocomplete attribute"}),"."]}),e.jsx(d.td,{children:e.jsx(d.code,{children:'"off"'})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"disabled"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"boolean"})}),e.jsx(d.td,{children:"When disabled, the input cannot be interacted with."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"false"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"required"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"boolean"})}),e.jsx(d.td,{children:"When required, the input must be filled before form submission."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"false"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"readOnly"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"boolean"})}),e.jsx(d.td,{children:"When readonly, the input cannot be changed."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"false"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"id"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsx(d.td,{children:"The id global attribute defines an identifier (ID) which must be unique in the whole document."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"className"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsx(d.td,{children:"The class global attribute is a list of the classes of the element."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"style"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"CSSProperties"})}),e.jsx(d.td,{children:"The style global attribute contains CSS styling declarations to be applied to the element."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"tabIndex"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"number"})}),e.jsx(d.td,{children:"The tabindex global attribute allows developers to make HTML elements focusable."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]}),e.jsxs(d.tr,{children:[e.jsx(d.td,{children:e.jsx(d.strong,{children:"title"})}),e.jsx(d.td,{children:e.jsx(d.code,{children:"string"})}),e.jsx(d.td,{children:"The title global attribute contains text representing advisory information related to the element it belongs to."}),e.jsx(d.td,{children:e.jsx(d.code,{children:"undefined"})}),e.jsx(d.td,{children:"No"})]})]})]})]})}function v(n={}){const{wrapper:d}={...r(),...n.components};return d?e.jsx(d,{...n,children:e.jsx(t,{...n})}):t(n)}export{v as default};
